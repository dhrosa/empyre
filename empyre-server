#! /usr/bin/python
from empyre.server import Server
from empyre.board import loadBoard
from PyQt4.QtCore import QCoreApplication, QSocketNotifier
import sys
from argparse import ArgumentParser
import logging
import os.path

if __name__ == "__main__":
    from PyQt4.QtCore import pyqtRemoveInputHook
    pyqtRemoveInputHook()
    app = QCoreApplication(sys.argv)
    p = ArgumentParser()
    p.add_argument("board", nargs='?', default="newengland", help="The name of the board to play on.")
    p.add_argument("-b", "--boardpath", help="The directory to search for boards in.")
    p.add_argument("-p", "--port", type=int, default="9002", help="The port to listen on. Defaults to 9002.")
    p.add_argument("-d", "--debug", action="store_true", help="Prints the state of the game's internal state machine after every action. Defaults to False.")
    args = p.parse_args()
    logging.basicConfig(stream=sys.stderr,
                        level=logging.DEBUG,
                        format="%(levelname)s [%(asctime)s] %(message)s",
                        datefmt="%Y-%m-%d %H:%M:%S")
    board = loadBoard(args.board, args.boardpath)
    if not board:
        logging.error("Could not load board: %s", args.board)
        sys.exit(1)
    logging.info("Loaded \"%s\" board." % (board.name))
    server = Server(args.board, board)
    socket = QSocketNotifier(sys.stdin.fileno(), QSocketNotifier.Read)
    socket.activated.connect(server.readStdin)
    logging.info("Listening on port %d.", args.port)
    if not server.listen(port=args.port):
        logging.error("Could not listen on port %d", args.port)
        sys.exit(1)
    sys.exit(app.exec_())

